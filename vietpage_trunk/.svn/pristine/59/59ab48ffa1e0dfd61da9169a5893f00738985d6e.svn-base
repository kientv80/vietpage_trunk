package com.vnsoft.server.biz;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.List;

import com.vnsoft.server.model.PageVisit;
import com.vnsoft.server.model.UserTracking;

public class TrackingBean {
	public static TrackingBean instance;
	public static final SimpleDateFormat yyyyMM = new SimpleDateFormat("YYYY-MM");
	public static final SimpleDateFormat yyyyMMdd = new SimpleDateFormat("YYYY-MM-dd");
	public static final SimpleDateFormat yyyyMMdd2 = new SimpleDateFormat("yyyy,MM,dd");
	public static final SimpleDateFormat yyyyMM2 = new SimpleDateFormat("yyyy,MM");
	public static final SimpleDateFormat yyyyMMddWW = new SimpleDateFormat("YYYY-MM-dd-WW");
	public static final SimpleDateFormat yyyyMMddHH = new SimpleDateFormat("YYYY-MM-dd HH");
	
	private TrackingBean() {
	}
	public static TrackingBean getInstance(){
		if(instance == null)
			instance = new TrackingBean();
		return instance;
	}
	public void trackingNewUser() throws Exception{
		Date d = Calendar.getInstance().getTime();
		String keyYYYYMM = yyyyMM.format(d);
		String keyYYYYMMDD = yyyyMMdd.format(d);
		String keyYYYYMMddww = yyyyMMddWW.format(d);
		String keyYYYYMMHH = yyyyMMddHH.format(d);
		Connection con = null;
		PreparedStatement stm = null;
		try {
			con = JDBCConnection.getInstance().getConnection();
			//TODO: handle insert
			boolean f = false;
			stm = con.prepareStatement("insert into trk_user (id,new_user_count,user_login_count) values(?,0,0)");
			if(!checkKeyExist(keyYYYYMM,"trk_user")){
				stm.setString(1, keyYYYYMM);
				stm.addBatch();
				f = true;
			}
			if(!checkKeyExist(keyYYYYMMDD,"trk_user")){
				stm.setString(1, keyYYYYMMDD);
				stm.addBatch();
				f = true;
			}
			if(!checkKeyExist(keyYYYYMMddww,"trk_user")){
				stm.setString(1, keyYYYYMMddww);
				stm.addBatch();
				f = true;
			}
			if(!checkKeyExist(keyYYYYMMHH,"trk_user")){
				stm.setString(1, keyYYYYMMHH);
				stm.addBatch();
				f = true;
			}
			if(f){
				stm.executeBatch();
			}
			
			stm = con.prepareStatement("update trk_user set new_user_count = (new_user_count+1) where id in(?,?,?,?)");
			stm.setString(1, keyYYYYMM);
			stm.setString(2, keyYYYYMMDD);
			stm.setString(3, keyYYYYMMddww);
			stm.setString(4, keyYYYYMMHH);
			stm.executeUpdate();
		} catch (Exception e) {
			e.printStackTrace();
		}finally{
			if (stm != null)
				stm.close();
			if (con != null)
				con.close();
		}
	}
	public void trackingUserLogin() throws Exception{
		Date d = Calendar.getInstance().getTime();
		String keyYYYYMM = yyyyMM.format(d);
		String keyYYYYMMDD = yyyyMMdd.format(d);
		String keyYYYYMMddww = yyyyMMddWW.format(d);
		String keyYYYYMMHH = yyyyMMddHH.format(d);
		Connection con = null;
		PreparedStatement stm = null;
		try {
			con = JDBCConnection.getInstance().getConnection();
			//TODO: handle insert
			boolean f = false;
			stm = con.prepareStatement("insert into trk_user( id,new_user_count,user_login_count) values(?,0,0)");
			if(!checkKeyExist(keyYYYYMM,"trk_user")){
				stm.setString(1, keyYYYYMM);
				stm.addBatch();
				f = true;
			}
			if(!checkKeyExist(keyYYYYMMDD,"trk_user")){
				stm.setString(1, keyYYYYMMDD);
				stm.addBatch();
				f = true;
			}
			if(!checkKeyExist(keyYYYYMMddww,"trk_user")){
				stm.setString(1, keyYYYYMMddww);
				stm.addBatch();
				f = true;
			}
			if(!checkKeyExist(keyYYYYMMHH,"trk_user")){
				stm.setString(1, keyYYYYMMHH);
				stm.addBatch();
				f = true;
			}
			if(f){
				stm.executeBatch();
			}
			stm = con.prepareStatement("update trk_user set user_login_count = (user_login_count+1) where id in(?,?,?,?)");
			stm.setString(1, keyYYYYMM);
			stm.setString(2, keyYYYYMMDD);
			stm.setString(3, keyYYYYMMddww);
			stm.setString(4, keyYYYYMMHH);
			stm.executeUpdate();
		} catch (Exception e) {
			e.printStackTrace();
		}finally{
			if (stm != null)
				stm.close();
			if (con != null)
				con.close();
		}
	}
	public List<UserTracking> getUserTrackingUser(List<String> keys) throws Exception{
		Connection con = null;
		PreparedStatement stm = null;
		ResultSet result = null;
		List<UserTracking>  trkInfo = new ArrayList<>();
		try {
			con = JDBCConnection.getInstance().getConnection();
			StringBuilder sql = new StringBuilder();
			sql.append("Select * from trk_user  where id in(");
			for(int i=0;i<keys.size();i++){
				if(i == keys.size() -1){
					sql.append("?");
				}else{
					sql.append("?,");
				}
			}
			sql.append(")");
			stm = con.prepareStatement(sql.toString());
			for(int i=0;i<keys.size();i++){
				stm.setString(i+1, keys.get(i));
			}
			result = stm.executeQuery();
			while (result.next()) {
				UserTracking u = new UserTracking();
				u.setId(result.getString("id"));
				u.setCreateNewUserCount(result.getLong("new_user_count"));
				u.setUserLoginCount(result.getLong("user_login_count"));
				trkInfo.add(u);
			}
		} catch (Exception e) {
			e.printStackTrace();
		}finally{
			if (stm != null)
				stm.close();
			if(result != null)
				result.close();
			if (con != null)
				con.close();
		}
		return trkInfo;
	}
	private boolean checkKeyExist(String key,String tableName) throws Exception{
		Connection con = null;
		PreparedStatement stm = null;
		ResultSet result = null;
		List<UserTracking>  trkInfo = new ArrayList<>();
		boolean alreadyExist = false;
		try {
			con = JDBCConnection.getInstance().getConnection();
			StringBuilder sql = new StringBuilder();
			sql.append("Select * from "+tableName+"  where id=?");
			stm = con.prepareStatement(sql.toString());
			stm.setString(1, key);
			result = stm.executeQuery();
			while (result.next()) {
				alreadyExist = true;
			}
		} catch (Exception e) {
			e.printStackTrace();
		}finally{
			if (stm != null)
				stm.close();
			if(result != null)
				result.close();
			if (con != null)
				con.close();
		}
		return alreadyExist;
	}
	
	public void trackingPageVisit(String pageId) throws Exception{
		Date d = Calendar.getInstance().getTime();
		String keyYYYYMM = pageId+"_"+yyyyMM.format(d);
		String keyYYYYMMDD = pageId+"_"+yyyyMMdd.format(d);
		String keyYYYYMMddww = pageId+"_"+yyyyMMddWW.format(d);
		String keyYYYYMMHH = pageId+"_"+yyyyMMddHH.format(d);
		Connection con = null;
		PreparedStatement stm = null;
		try {
			con = JDBCConnection.getInstance().getConnection();
			//TODO: handle insert
			boolean f = false;
			stm = con.prepareStatement("insert into trk_page_visit (id,visit_count) values(?,0)");
			if(!checkKeyExist(keyYYYYMM,"trk_page_visit")){
				stm.setString(1, keyYYYYMM);
				stm.addBatch();
				f = true;
			}
			if(!checkKeyExist(keyYYYYMMDD,"trk_page_visit")){
				stm.setString(1, keyYYYYMMDD);
				stm.addBatch();
				f = true;
			}
			if(!checkKeyExist(keyYYYYMMddww,"trk_page_visit")){
				stm.setString(1, keyYYYYMMddww);
				stm.addBatch();
				f = true;
			}
			if(!checkKeyExist(keyYYYYMMHH,"trk_page_visit")){
				stm.setString(1, keyYYYYMMHH);
				stm.addBatch();
				f = true;
			}
			if(f){
				stm.executeBatch();
			}
			
			stm = con.prepareStatement("update trk_page_visit set visit_count = (visit_count+1) where id in (?,?,?,?)");
			stm.setString(1, keyYYYYMM);
			stm.setString(2, keyYYYYMMDD);
			stm.setString(3, keyYYYYMMddww);
			stm.setString(4, keyYYYYMMHH);
			stm.executeUpdate();
		} catch (Exception e) {
			e.printStackTrace();
		}finally{
			if (stm != null)
				stm.close();
			if (con != null)
				con.close();
		}
	}
	
	public List<PageVisit> getPageVisitTracking(List<String> keys) throws Exception{
		Connection con = null;
		PreparedStatement stm = null;
		ResultSet result = null;
		List<PageVisit>  trkInfo = new ArrayList<>();
		try {
			con = JDBCConnection.getInstance().getConnection();
			StringBuilder sql = new StringBuilder();
			sql.append("Select * from trk_page_visit  where id in(");
			for(int i=0;i<keys.size();i++){
				if(i == keys.size() -1){
					sql.append("?");
				}else{
					sql.append("?,");
				}
			}
			sql.append(")");
			stm = con.prepareStatement(sql.toString());
			for(int i=0;i<keys.size();i++){
				stm.setString(i+1, keys.get(i));
			}
			result = stm.executeQuery();
			while (result.next()) {
				PageVisit u = new PageVisit();
				u.setId(result.getString("id"));
				u.setVisitCount(result.getLong("visit_count"));
				trkInfo.add(u);
			}
		} catch (Exception e) {
			e.printStackTrace();
		}finally{
			if (stm != null)
				stm.close();
			if(result != null)
				result.close();
			if (con != null)
				con.close();
		}
		return trkInfo;
	}
}
